START -> S
S -> Function main with no arguments and return type number : SN
SN -> SN N
SN -> N
N -> RETURN
N -> WRITE
N -> ASSIGNMENT
N -> LOAD
N -> DECLARATION
N -> FOR
N -> WHILE
N -> IF
DATATYPE -> number
DATATYPE -> letter
DATATYPE -> bigDecimalNumber
DATATYPE -> boolean
RETURN -> the DATATYPE value of variable .
RETURN -> variable .
WRITE -> variable .
WRITE -> the DATATYPE content of variable .
ASSIGNMENT -> The DATATYPE variable takes value of variable .
ASSIGNMENT -> The DATATYPE variable takes value of funccall .
ASSIGNMENT -> ARITHMETICS ( variable to variable ) then put it in DATATYPE variable .
ARITHMETICS -> add
ARITHMETICS -> subtract
ARITHMETICS -> multiply
ARITHMETICS -> divide by
LOAD -> DATATYPE variable .
DECLARATION -> DATATYPE variable .
IF -> IF ELIF ELSE
IF -> IF ELIF
IF -> IF ELSE
IF -> IF
IF -> it is boolean that CONDBLOCK LOGICAL CONDBLOCK , THEN : { IFBLOCK }
CONDITIONAL -> higher than
CONDITIONAL -> lower than
CONDITIONAL -> equal to
CONDBLOCK -> variable is CONDITIONAL variable
LOGICAL -> and
LOGICAL -> or
IFBLOCK -> SN
ELSE IF -> IF
ELSE -> , do : { IFBLOCK }
WHILE -> it is boolean , do : { LOOPBLOCK }
WHILE -> it is boolean that CONDBLOCK , do : { LOOPBLOCK }
FOR -> values of counter variable from variable to variable , do : { LOOPBLOCK }
FOR -> values of counter variable from variable to variable STEP do : { LOOPBLOCK }
FOR -> values of counter variable from variable until CONDBLOCK , do : { LOOPBLOCK }
FOR -> values of counter variable from variable until CONDBLOCK STEP do : { LOOPBLOCK }
STEP -> , step number ,
LOOPBLOCK -> SN ENDOF
ENDOF -> loop
ENDOF -> function
FUNCTION -> funcname with ARGUMENTBLOCK and RETURNBLOCK
ARGUMENTBLOCK -> no arguments
ARGUMENTBLOCK -> DATATYPE varibale as argument
ARGUMENTBLOCK -> DATATYPE varibale , DATATYPE varibale as arguments
RETURNBLOCK -> no return value ENDOF
RETURNBLOCK -> return type DATATYPE ENDOF